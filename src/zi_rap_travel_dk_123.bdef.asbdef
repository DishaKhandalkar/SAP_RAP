managed ;
//strict ( 1 ); //Uncomment this line in order to enable strict mode 2. The strict mode has two variants (strict(1), strict(2)) and is prerequisite to be future proof regarding syntax and to be able to release your BO.

define behavior for ZI_RAP_Travel_DK_123 alias Travel
implementation in class zbp_I_rap_travel_123 unique
persistent table zrap_travel_dk_1
lock master
authorization master ( instance )
etag master LocalLastChangedAt
{
  create;
  update;
  delete;
  association _booking { create; }

  field ( numbering : managed, readonly ) TravelUuid;    //TravelUUID - Primary key of Travel BO
  field ( readonly ) TravelId, TotalPrice, TravelStatus;
  field ( readonly ) LastChangedAt, LastChangedBy, CreatedAt, CreatedBy, LocalLastChangedAt;
  field ( mandatory ) AgencyId, CustomerId;   //This will show the little red star symbol in fiori elements UI.

  //For approving and rejecting travels, we define two actions with dynamic feature control
  //$self â€“ means that the instance of the same type is returned on which the operation is performed
  action ( features : instance ) acceptTravel result [1] $self;
  action ( features : instance ) rejectTravel result [1] $self;
  internal action recalcTotalPrice;         //For the recalculation of the total price ````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````

  determination setInitialStatus on modify { create; }           //used to defalut the status n whenever a new instance is created. it uses the create trigger on modify
  determination calculateTotalPrice on modify { field BookingFee, CurrencyCode; }  //to update the total price whenever the booking fee or currency code is changed.
  determination calculateTravelID on save { create; }   //to determine the travel ID when a new instance is created. it is executed on save.

  validation validateAgency on save { field AgencyId; create; }          //Field validation on save
  validation validateCustomer on save { field CustomerId; create; }
  validation validateDates on save { field BeginDate, EndDate; create; }

  mapping for ZRAP_TRAVEL_DK_1
  {
    TravelUuid = travel_uuid;
    TravelId = travel_id;
    AgencyId = agency_id;
    CustomerId = customer_id;
    BeginDate = begin_date;
    EndDate = end_date;
    BookingFee = booking_fee;
    TotalPrice = total_price;
    CurrencyCode = currency_code;
    Description = description;
    TravelStatus = travel_status;
    CreatedBy = created_by;
    CreatedAt = created_at;
    LocalLastChangedAt = local_last_changed_at;
  }
}

define behavior for ZI_RAP_BOOK_DK_123 alias Booking
implementation in class zbp_I_rap_booking_123 unique
persistent table zrap_booking_1
lock dependent by _Travel
authorization dependent by _Travel    //This declares the booking entity as authorization dependent
etag master LocalLastChangedAt
{
  update;
  delete;
  association _Travel;

  field ( numbering : managed, readonly ) BookingUuid;
  field ( readonly ) TravelUuid, BookingId;
  field ( readonly ) CreatedBy, LastChangedBy, LocalLastChangedAt;

  determination calculateBookingID on modify { create; }      //For determining the booking ID
  determination calculateTotalPrice on modify { field FlightPrice, CurrencyCode; }  //Updating the total price

  mapping for ZRAP_BOOKING_1
  {
    BookingUuid = booking_uuid;
    TravelUuid = travel_uuid;
    BookingId = booking_id;
    BookingDate = booking_date;
    CustomerId = customer_id;
    CarrierId = carrier_id;
    ConnectionId = connection_id;
    FlightDate = flight_date;
    FlightPrice = flight_price;
    CurrencyCode = currency_code;
    CreatedBy = created_by;
    LastChangedBy = last_changed_by;
    LocalLastChangedAt = local_last_changed_at;
  }
}